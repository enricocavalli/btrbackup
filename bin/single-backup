#!/bin/bash

# ARG1: host da backuppare (e.g. esx-aiace.ciela.it)
#
#

INSTALLDIR=$( (cd -P $(dirname $0) && pwd) | sed -e 's!/bin!!' )

if [ ! "${1}" ]; then
        echo "Usage: $0 CONFIG_NAME"
	exit
fi

CONFIG_NAME=$1
LOGFILE="$INSTALLDIR/logs/${CONFIG_NAME}.log"
LOGFILE_RSYNC="$INSTALLDIR/logs/${CONFIG_NAME}-rsync.log"
LOCK="$INSTALLDIR/locks/$CONFIG_NAME"


. $INSTALLDIR/bin/functions

if [ -e "$INSTALLDIR/bin/agent.sh" ]; then

	. $INSTALLDIR/bin/agent.sh

fi
pid=$$
scriptname="btrbackup"


if ! [ -f $INSTALLDIR/etc/hosts/$CONFIG_NAME.conf ]; then
	# esco con errore senza avvisare tanto normalmente lo script e' invocato da job runner che scrive
	# un messaggio opportuno
	exit 1
fi

# importo varibili "globali"
. $INSTALLDIR/etc/btrbackup.conf
# importo il file di configurazione della singola macchina
. $INSTALLDIR/etc/hosts/$CONFIG_NAME.conf

# load machine personanlizations
# override delle variabili eventualmente definite
if [ -f $BACKUP_DIR/$CONFIG_NAME/conf/additional.conf ]; then
	. $BACKUP_DIR/$CONFIG_NAME/conf/additional.conf
fi

MAXDAYS=${MAXDAYS:-60}

set -e

if [ ! -d $BACKUP_DIR/$CONFIG_NAME ]; then
	log_message ${scriptname} ${pid} "Backup directory  $BACKUP_DIR/$CONFIG_NAME not found" >> ${LOGFILE}
	exit 1
fi


if lockfile -! -l 43200 -r 0 "$LOCK" 2>&1 ; then
	log_message ${scriptname} ${pid} "Another backup is running for this configuration" >> ${LOGFILE}  
	exit 1
fi

trap "rm -f $LOCK > /dev/null 2>&1" exit

set +e

lastone=$(ls $BACKUP_DIR/$CONFIG_NAME 2>/dev/null | grep ^[0-9] | sort | tail -1 | sed -e s'/T/ /')

now=$(date +%Y-%m-%dT%H:%M:%S)

/usr/bin/rsync $RSYNC_OPTIONS $RSYNC_ADDITIONAL_OPTIONS  \
	--exclude-from=$RSYNC_EXCLUDES \
	--files-from=$RSYNC_FILESYSTEMS -r \
	--rsync-path="$RSYNC_EXEC" --rsh="$RSYNC_SSHCMD -p $RSYNC_PORT -i $RSYNC_SSH_KEY" \
	--log-file=$LOGFILE_RSYNC \
	$RSYNC_USER@$RSYNC_HOST:/ $BACKUP_DIR/$CONFIG_NAME/.work  > /dev/null 2>&1

return=$?

if [  0 = $return -o 24 = $return ]; then


	${BTRFS} subvolume snapshot $BACKUP_DIR/$CONFIG_NAME/.work $BACKUP_DIR/$CONFIG_NAME/$now | \
		log_output ${scriptname} ${pid} >> $LOGFILE


	if [ "${LEGATO}" ]; then
		${BTRFS} subvolume delete  $BACKUP_DIR/legato/$CONFIG_NAME 2>&1 | \
		log_output ${scriptname} ${pid} >> $LOGFILE
		return=$?
		if [ "$return" == "0" -o "$return" == "12" ]; then # ERROR 12 means legato snaphost does non exist
			${BTRFS} subvolume snapshot $BACKUP_DIR/$CONFIG_NAME/.work $BACKUP_DIR/legato/$CONFIG_NAME 2>&1 | \
			log_output ${scriptname} ${pid} >> $LOGFILE
		else
			 log_message ${scriptname} ${pid} "Cannot delete legato snapshot $BACKUP_DIR/legato/$CONFIG_NAME" >>  ${LOGFILE}
		fi
	fi

	elenco=$(ls $BACKUP_DIR/$CONFIG_NAME | grep ^[0-9])
	oldest=$(ls $BACKUP_DIR/$CONFIG_NAME | grep ^[0-9] | head -1)
	kept=0

	for line in $elenco
		do
		orariobackup=$line
		# nasty bug with timezones YYYY-mm-ddTHH:MM:SS is intrpreted as UTC
                # substituing T with white space interpreted as local time zone
                orariopercalcoli=$(echo -n $orariobackup | sed -e 's/T/ /')
                ore=$(dateDiff -h "$now" "$orariobackup")
                giorni=$(dateDiff -d "$now" "$orariobackup")
                giornomese=$(date --date "$orariopercalcoli" +%Y%m%d)
                settimana=$(date --date "$orariopercalcoli" +%G%V)

		if [ $ore -lt 24 ]; then
                        hourly[$ore]=$((${hourly[$ore]}+1))
                        if [ ${hourly[$ore]} -gt 1 -a $ore -ge 1 ]; then
                        ${BTRFS} subvolume delete $BACKUP_DIR/$CONFIG_NAME/$line 2>&1 | \
				log_output ${scriptname} ${pid} >> $LOGFILE
                        else
                        kept=$(($kept + 1))
                        fi
                fi
                if [ $giorni -le 30 -a $ore -ge 24 ]; then
                        daily[$giornomese]=$((${daily[$giornomese]}+1))

                         if [ ${daily[$giornomese]} -gt 1 ]; then
                        ${BTRFS} subvolume delete $BACKUP_DIR/$CONFIG_NAME/$line  2>&1 | \
			log_output ${scriptname} ${pid} >> $LOGFILE
                        else
                        kept=$(($kept + 1))
                        fi

                fi
		if [ $giorni -gt 30 ]; then
                        weekly[$settimana]=$((${weekly[$settimana]}+1))
                         if [ ${weekly[$settimana]} -gt 1 -o $giorni -gt $MAXDAYS ]; then
                        ${BTRFS} subvolume delete $BACKUP_DIR/$CONFIG_NAME/$line 2>&1 | \
			log_output ${scriptname} ${pid} >> $LOGFILE
                        else
                        kept=$(($kept + 1))
                        fi

                fi
                done

		log_message ${scriptname} ${pid} "Number of backups: $kept" >> ${LOGFILE}
		log_message ${scriptname} ${pid} "Oldest backup: $oldest" >> ${LOGFILE}

	if ! [ -z $MAILTO ]; then
		mutt -s "BACKUP OK - $CONFIG_NAME" -a "$LOGFILE_RSYNC" -- $MAILTO < $LOGFILE
	fi

else

	if ! [ -z $MAILTO ]; then
		mutt -s "BACKUP ERROR - $CONFIG_NAME" -a "$LOGFILE_RSYNC" -- $MAILTO < $LOGFILE
	fi

fi

savelog $LOGFILE > /dev/null 2>&1
savelog $LOGFILE_RSYNC > /dev/null 2>&1
